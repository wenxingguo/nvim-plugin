"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/******************************************************************
MIT License http://www.opensource.org/licenses/mit-license.php
Author Qiming Zhao <chemzqm@gmail> (https://github.com/chemzqm)
*******************************************************************/
const coc_nvim_1 = require("coc.nvim");
const os_1 = __importDefault(require("os"));
const util_1 = require("../util");
function formatPrefix(prefix) {
    if (prefix.length >= 20)
        return prefix.slice(0, 17) + '...';
    return prefix + ' '.repeat(20 - prefix.length);
}
class SnippetsList extends coc_nvim_1.BasicList {
    constructor(_nvim, manager) {
        super();
        this.manager = manager;
        this.name = 'snippets';
        this.description = 'snippets list';
        this.addLocationActions();
    }
    async loadItems(context) {
        var _a;
        let { window } = context;
        let valid = await window.valid;
        if (!valid)
            return;
        let buf = await window.buffer;
        let doc = coc_nvim_1.workspace.getDocument(buf.id);
        if (!doc)
            return [];
        let filetype = (0, util_1.getSnippetFiletype)(doc);
        let snippets = this.manager.getSnippets(filetype);
        let res = [];
        for (let snip of snippets) {
            let pos = coc_nvim_1.Position.create(snip.lnum, 0);
            let location = coc_nvim_1.Location.create(coc_nvim_1.Uri.file(snip.filepath).toString(), coc_nvim_1.Range.create(pos, coc_nvim_1.Position.create(snip.lnum, 1)));
            let prefix = snip.prefix.length ? snip.prefix : (_a = snip.originRegex) !== null && _a !== void 0 ? _a : '';
            res.push({
                label: `${formatPrefix(prefix)}\t${snip.description}\t${snip.filepath.replace(os_1.default.homedir(), '~')}`,
                filterText: `${snip.prefix} ${snip.description}`,
                location,
                data: { prefix }
            });
        }
        res.sort((a, b) => a.data.prefix.localeCompare(b.data.prefix));
        return res;
    }
    async doHighlight() {
        let { nvim } = coc_nvim_1.workspace;
        nvim.pauseNotification();
        nvim.command('syntax match CocSnippetsPrefix /\\v^.{1,20}/ contained containedin=CocSnippetsLine', true);
        nvim.command('syntax match CocSnippetsFile /\\v\\t\\S+$/ contained containedin=CocSnippetsLine', true);
        nvim.command('highlight default link CocSnippetsPrefix Identifier', true);
        nvim.command('highlight default link CocSnippetsFile Comment', true);
        void nvim.resumeNotification(false, true);
    }
}
exports.default = SnippetsList;
