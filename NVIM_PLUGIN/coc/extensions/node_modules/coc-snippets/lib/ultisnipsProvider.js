"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnippetsDirectory = exports.UltiSnippetsProvider = void 0;
const coc_nvim_1 = require("coc.nvim");
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const baseProvider_1 = __importDefault(require("./baseProvider"));
const types_1 = require("./types");
const ultisnipsParser_1 = __importDefault(require("./ultisnipsParser"));
const util_2 = require("./util");
class UltiSnippetsProvider extends baseProvider_1.default {
    constructor(channel, config, context) {
        super(config, channel);
        this.config = config;
        this.context = context;
        this.loadedLanguageIds = new Set();
        this.errorFiles = new Set();
        this.snippetFiles = [];
        this.fileItems = [];
        this.pythonSupport = true;
        coc_nvim_1.workspace.onDidSaveTextDocument(async (doc) => {
            let uri = coc_nvim_1.Uri.parse(doc.uri);
            if (uri.scheme != 'file' || !doc.uri.endsWith('.snippets'))
                return;
            let filepath = uri.fsPath;
            if (!fs_1.default.existsSync(filepath))
                return;
            let idx = this.snippetFiles.findIndex(s => (0, util_2.sameFile)(s.filepath, filepath));
            if (idx !== -1) {
                const snippetFile = this.snippetFiles[idx];
                this.snippetFiles.splice(idx, 1);
                await this.loadSnippetsFromFile({ filetype: snippetFile.filetype, filepath, directory: snippetFile.directory });
            }
            else {
                let filetype = (0, util_2.filetypeFromBasename)(path_1.default.basename(filepath, '.snippets'));
                if (this.allFiletypes.includes(filetype))
                    await this.loadSnippetsFromFile({ filetype, filepath, directory: path_1.default.dirname(filepath) });
            }
        }, null, this.context.subscriptions);
    }
    get directories() {
        let dirs = this.config.directories || [];
        return dirs.map(dir => coc_nvim_1.workspace.expand(dir));
    }
    async showPrompt() {
        if (!this.config.pythonPrompt)
            return;
        let name = coc_nvim_1.workspace.isVim ? `python` : `provider-python`;
        await coc_nvim_1.window.showWarningMessage(`The Ultisnips feature of coc-snippets requires Python support on Vim, see :h ${name}`, {
            title: 'I understand, don\'t show this message again',
            isCloseAffordance: true
        });
        let config = coc_nvim_1.workspace.getConfiguration('snippets.ultisnips', null);
        config.update('pythonPrompt', false, true);
    }
    async init() {
        let { nvim, env } = coc_nvim_1.workspace;
        this.info(`Using ultisnips directories:`, this.directories);
        try {
            await nvim.call('pyxeval', ['1']);
        }
        catch (e) {
            this.pythonSupport = false;
            void this.showPrompt();
        }
        this.parser = new ultisnipsParser_1.default(this.channel, this.config.trace);
        this.fileItems = await this.loadAllFileItems(env.runtimepath);
        coc_nvim_1.workspace.onDidRuntimePathChange(async (e) => {
            let subFolders = await this.getSubFolders();
            const newItems = [];
            for (const dir of e) {
                let res = await this.getFilesFromDirectory(dir, subFolders);
                if (res === null || res === void 0 ? void 0 : res.length)
                    newItems.push(...res);
            }
            let items = newItems.filter(item => !this.fileItems.find(o => o.filepath === item.filepath));
            if (items.length) {
                this.fileItems.push(...items);
                let { allFiletypes } = this;
                for (let item of items) {
                    if (allFiletypes.includes(item.filetype)) {
                        await this.loadSnippetsFromFile(item);
                    }
                }
            }
        }, null, this.context.subscriptions);
        if (this.pythonSupport) {
            let filepath = this.context.asAbsolutePath('python/ultisnips.py');
            await coc_nvim_1.workspace.nvim.call('coc#util#open_file', ['pyxfile', filepath]);
        }
    }
    async loadSnippetsByFiletype(filetype) {
        let filetypes = this.getFiletypes(filetype);
        if (!filetypes.includes('all'))
            filetypes.push('all');
        filetypes = filetypes.filter(filetype => !this.loadedLanguageIds.has(filetype));
        if (filetypes.length == 0)
            return;
        let sorted = getSortedFiletypes(filetype, filetypes);
        sorted.forEach(filetype => this.loadedLanguageIds.add(filetype));
        for (let ft of sorted) {
            for (let item of this.fileItems) {
                if (item.filetype === ft) {
                    await this.loadSnippetsFromFile(item);
                }
            }
        }
    }
    get allFiletypes() {
        let filetypes = Array.from(coc_nvim_1.workspace.filetypes).concat((0, util_2.getAllAdditionalFiletype)());
        let res = new Set();
        for (let ft of filetypes) {
            let arr = this.getFiletypes(ft);
            arr.forEach(val => res.add(val));
        }
        res.add('all');
        return Array.from(res);
    }
    async loadSnippetsFromFile(fileItem) {
        let { filepath, directory, filetype } = fileItem;
        let idx = this.snippetFiles.findIndex(o => (0, util_2.sameFile)(o.filepath, filepath));
        if (idx !== -1 || this.isIgnored(filepath))
            return;
        let { snippets, pythonCode, extendFiletypes, clearsnippets } = await this.parser.parseUltisnipsFile(filetype, filepath);
        if (!this.pythonSupport) {
            // filter snippet with python
            snippets = snippets.filter(s => s.regex == null && s.context == null && !s.body.includes('`!p'));
        }
        this.snippetFiles.push({
            extendFiletypes,
            clearsnippets,
            directory,
            filepath,
            filetype,
            snippets
        });
        if (extendFiletypes === null || extendFiletypes === void 0 ? void 0 : extendFiletypes.length) {
            let filetypes = this.config.extends[filetype] || [];
            filetypes = filetypes.concat(extendFiletypes);
            this.config.extends[filetype] = (0, util_2.distinct)(filetypes);
            let fts = new Set();
            for (let ft of extendFiletypes) {
                this.getFiletypes(ft).forEach(s => fts.add(s));
            }
            let promises = [];
            this.fileItems.forEach(item => {
                if (!fts.has(item.filetype))
                    return;
                promises.push(this.loadSnippetsFromFile(item));
            });
            await Promise.allSettled(promises);
        }
        this.info(`Loaded ${snippets.length} UltiSnip snippets from: ${filepath}`);
        if (pythonCode.trim().length > 0) {
            util_2.pythonCodes.set(filepath, { hash: (0, util_2.createMD5)(pythonCode), code: pythonCode });
            this.executePyCodesForFile(filepath).catch(e => {
                this.error(e.message);
            });
        }
    }
    async checkContext(context) {
        if (!this.pythonSupport)
            return false;
        // avoid change global value
        let pyCodes = [
            'import re, os, vim, string, random',
            'def __check_context():',
            `  snip = coc_ultisnips_dict['ContextSnippet']()`,
            `  context = ${context}`,
            `  vim.vars['__coc_context_result'] = True if context else False`,
            `__check_context()`
        ];
        await this.executePyCodes(pyCodes);
        return await coc_nvim_1.workspace.nvim.getVar('__coc_context_result');
    }
    async executePyCodes(lines) {
        try {
            await coc_nvim_1.workspace.nvim.command(`pyx ${addPythonTryCatch(lines.join('\n'))}`);
        }
        catch (e) {
            let err = new Error(e.message);
            err.stack = `Error on execute python code:\n${lines}\n` + e.stack;
            throw err;
        }
    }
    async getTriggerSnippets(document, position, autoTrigger) {
        let snippets = this.getDocumentSnippets(document);
        let line = document.getline(position.line);
        line = line.slice(0, position.character);
        if (line.length == 0)
            return [];
        snippets = snippets.filter(s => {
            if (autoTrigger && !s.autoTrigger)
                return false;
            let match = getMatched(s, line);
            if (match == null)
                return false;
            if (s.triggerKind == types_1.TriggerKind.InWord)
                return true;
            let pre = line.slice(0, line.length - match.length);
            if (s.triggerKind == types_1.TriggerKind.LineBegin)
                return pre.trim() == '';
            if (s.triggerKind == types_1.TriggerKind.SpaceBefore)
                return pre.length == 0 || /\s$/.test(pre);
            if (s.triggerKind == types_1.TriggerKind.WordBoundary)
                return pre.length == 0 || !document.isWord(pre[pre.length - 1]);
            return false;
        });
        snippets.sort((a, b) => {
            if (a.context && !b.context)
                return -1;
            if (b.context && !a.context)
                return 1;
            return 0;
        });
        let edits = [];
        let hasContext = false;
        for (let s of snippets) {
            let character;
            if (s.context) {
                let valid = await this.checkContext(s.context);
                if (!valid)
                    continue;
                hasContext = true;
            }
            else if (hasContext) {
                break;
            }
            if (s.regex == null) {
                character = position.character - s.prefix.length;
            }
            else {
                let len = line.match(s.regex)[0].length;
                character = position.character - len;
            }
            let range = coc_nvim_1.Range.create(position.line, character, position.line, position.character);
            edits.push({
                range,
                actions: s.actions,
                newText: s.body,
                prefix: s.prefix,
                description: s.description,
                location: s.filepath,
                lnum: s.lnum,
                priority: s.priority,
                regex: s.originRegex,
                context: s.context,
                formatOptions: s.formatOptions
            });
        }
        return edits;
    }
    async getSnippetFiles(filetype) {
        let filetypes = this.getFiletypes(filetype);
        filetypes.push('all');
        let res = [];
        for (let s of this.snippetFiles) {
            if (filetypes.includes(s.filetype)) {
                res.push(s.filepath);
            }
        }
        return res;
    }
    getSnippets(filetype) {
        let filetypes = this.getFiletypes(filetype);
        filetypes.push('all');
        let snippetFiles = this.snippetFiles.filter(o => filetypes.indexOf(o.filetype) !== -1);
        let min = null;
        let result = [];
        snippetFiles.sort((a, b) => {
            if (a.filetype == b.filetype)
                return 1;
            if (a.filetype == filetype)
                return -1;
            return 1;
        });
        for (let file of snippetFiles) {
            let { snippets, clearsnippets } = file;
            if (typeof clearsnippets == 'number') {
                min = min ? Math.max(min, clearsnippets) : clearsnippets;
            }
            for (let snip of snippets) {
                if (snip.regex || snip.context) {
                    result.push(snip);
                }
                else {
                    let idx = result.findIndex(o => o.prefix == snip.prefix && o.triggerKind == snip.triggerKind);
                    if (idx == -1) {
                        result.push(snip);
                    }
                    else {
                        let item = result[idx];
                        if (snip.priority > item.priority) {
                            result[idx] = item;
                        }
                    }
                }
            }
        }
        if (min != null)
            result = result.filter(o => o.priority >= min);
        result.sort((a, b) => {
            if (a.context && !b.context)
                return -1;
            if (b.context && !a.context)
                return 1;
            return 0;
        });
        return result;
    }
    async loadAllFileItems(runtimepath) {
        let { directories } = this;
        let res = [];
        for (let directory of directories) {
            if (path_1.default.isAbsolute(directory)) {
                let items = await this.getSnippetFileItems(directory);
                res.push(...items);
            }
        }
        let subFolders = await this.getSubFolders();
        let rtps = runtimepath.split(',');
        for (let rtp of rtps) {
            let items = await this.getFilesFromDirectory(rtp, subFolders);
            res.push(...items);
        }
        return res;
    }
    async getSubFolders() {
        let { directories } = this;
        directories = directories.filter(s => !path_1.default.isAbsolute(s));
        // use UltiSnipsSnippetDirectories
        let dirs = await coc_nvim_1.workspace.nvim.eval('get(g:, "UltiSnipsSnippetDirectories", [])');
        for (let dir of dirs) {
            if (directories.indexOf(dir) == -1) {
                directories.push(dir);
            }
        }
        return directories;
    }
    async getFiletype() {
        let buf = await coc_nvim_1.workspace.nvim.buffer;
        if (buf) {
            let doc = coc_nvim_1.workspace.getDocument(buf.id);
            if (doc)
                return doc.filetype;
        }
        return null;
    }
    async editSnippets(text) {
        const configuration = coc_nvim_1.workspace.getConfiguration('snippets');
        let filetype = await this.getFiletype();
        filetype = filetype !== null && filetype !== void 0 ? filetype : 'all';
        filetype = filetype.indexOf('.') == -1 ? filetype : filetype.split('.')[0];
        const snippetsDir = await getSnippetsDirectory(configuration);
        let { nvim } = coc_nvim_1.workspace;
        let file = path_1.default.join(snippetsDir, `${filetype}.snippets`);
        if (!fs_1.default.existsSync(file)) {
            await util_1.default.promisify(fs_1.default.writeFile)(file, util_2.documentation, 'utf8');
        }
        let uri = coc_nvim_1.Uri.file(file).toString();
        await coc_nvim_1.workspace.jumpTo(uri, null, configuration.get('editSnippetsCommand'));
        if (text) {
            await nvim.command('normal! G');
            await nvim.command('normal! 2o');
            let position = await coc_nvim_1.window.getCursorPosition();
            let indent = text.match(/^\s*/)[0];
            text = text.split(/\r?\n/).map(s => s.startsWith(indent) ? s.slice(indent.length) : s).join('\n');
            let escaped = text.replace(/([$}\]])/g, '\\$1');
            // tslint:disable-next-line: no-invalid-template-strings
            let snippet = 'snippet ${1:Tab_trigger} "${2:Description}" ${3:b}\n' + escaped + '\nendsnippet';
            let edit = coc_nvim_1.TextEdit.insert(position, snippet);
            await coc_nvim_1.commands.executeCommand('editor.action.insertSnippet', edit, false);
        }
    }
    async getFilesFromDirectory(directory, subFolders) {
        let res = [];
        for (let folder of subFolders) {
            let items = await this.getSnippetFileItems(path_1.default.join(directory, folder));
            res.push(...items);
        }
        return res;
    }
    /**
     * Get files in directory.
     */
    async getSnippetFileItems(directory) {
        let res = [];
        let stat = await (0, util_2.statAsync)(directory);
        if (stat && stat.isDirectory()) {
            let files = await (0, util_2.readdirAsync)(directory);
            if (files.length) {
                for (let filename of files) {
                    let file = path_1.default.join(directory, filename);
                    if (file.endsWith('.snippets')) {
                        let basename = path_1.default.basename(filename, '.snippets');
                        let filetype = (0, util_2.filetypeFromBasename)(basename);
                        res.push({ filepath: file, directory, filetype });
                    }
                    else {
                        let stat = await (0, util_2.statAsync)(file);
                        if (stat && stat.isDirectory()) {
                            let files = await (0, util_2.readdirAsync)(file);
                            for (let filename of files) {
                                if (filename.endsWith('.snippets')) {
                                    res.push({ filepath: path_1.default.join(file, filename), directory, filetype: path_1.default.basename(file) });
                                }
                            }
                        }
                    }
                }
            }
        }
        return res;
    }
    async executePyCodesForFile(filepath) {
        let info = util_2.pythonCodes.get(filepath);
        if (!info)
            return;
        let { code, hash } = info;
        const tmpfile = path_1.default.join(os_1.default.tmpdir(), `coc-snippets-${hash}.py`);
        try {
            if (this.errorFiles.has(tmpfile))
                return;
            if (!fs_1.default.existsSync(tmpfile)) {
                let prefix = [
                    '# -*- coding: utf-8 -*-\n',
                    `# ${filepath}\n`
                ];
                fs_1.default.writeFileSync(tmpfile, prefix.join('\n') + code, 'utf8');
            }
            this.info(`Execute python file ${tmpfile} from: ${filepath}`);
            await coc_nvim_1.workspace.nvim.call('coc#util#open_file', ['pyxfile', tmpfile]);
        }
        catch (e) {
            this.errorFiles.add(tmpfile);
            this.error(`Error on execute python script ${e.stack}:`, code);
            void coc_nvim_1.window.showErrorMessage(`Error python code from file ${filepath}: ${e.message}`);
        }
    }
    async onFiletypeChange(bufnr, filetype) {
        let filetypes = (0, util_2.distinct)([...(0, util_2.getAdditionalFiletype)(bufnr), ...this.getFiletypes(filetype)]);
        let sorted = getSortedFiletypes(filetype, filetypes);
        let files = [];
        sorted.forEach(ft => {
            this.snippetFiles.forEach(s => {
                if (s.filetype === ft) {
                    files.push(s.filepath);
                }
            });
        });
        for (let file of files) {
            await this.executePyCodesForFile(file);
        }
    }
}
exports.UltiSnippetsProvider = UltiSnippetsProvider;
// make all first and main filetype last
function getSortedFiletypes(filetype, filetypes) {
    let res = [];
    if (filetypes.includes('all'))
        res.push('all');
    let mainFiletype = filetype.split('.')[0];
    res.push(...filetypes.filter(s => s !== mainFiletype && s !== 'all'));
    if (mainFiletype.length > 0)
        res.push(mainFiletype);
    return res;
}
/**
  * vim8 doesn't throw any python error with :py command
  * we have to use g:errmsg since v:errmsg can't be changed in python script.
  */
function addPythonTryCatch(code) {
    if (!coc_nvim_1.workspace.isVim)
        return code;
    let lines = [
        'import traceback, vim',
        `vim.vars['errmsg'] = ''`,
        'try:',
    ];
    lines.push(...code.split('\n').map(line => '    ' + line));
    lines.push('except Exception as e:');
    lines.push(`    vim.vars['errmsg'] = traceback.format_exc()`);
    return lines.join('\n');
}
function getMatched(snippet, line) {
    let { prefix, regex } = snippet;
    if (regex) {
        let ms = line.match(regex);
        if (!ms)
            return undefined;
        return ms[0];
    }
    if (!line.endsWith(prefix))
        return undefined;
    return prefix;
}
/*
 * Get user snippets directory.
 */
async function getSnippetsDirectory(configuration) {
    let snippetsDir = configuration.get('userSnippetsDirectory');
    if (snippetsDir) {
        snippetsDir = coc_nvim_1.workspace.expand(snippetsDir);
        if (!path_1.default.isAbsolute(snippetsDir)) {
            coc_nvim_1.window.showWarningMessage(`snippets.userSnippetsDirectory => ${snippetsDir} should be absolute path`);
            snippetsDir = null;
        }
    }
    if (!snippetsDir)
        snippetsDir = path_1.default.join(path_1.default.dirname(coc_nvim_1.workspace.env.extensionRoot), 'ultisnips');
    if (!fs_1.default.existsSync(snippetsDir)) {
        await fs_1.default.promises.mkdir(snippetsDir, { recursive: true });
    }
    return snippetsDir;
}
exports.getSnippetsDirectory = getSnippetsDirectory;
